schema {
  query: Query
  mutation: Mutation
}

type Department {
  prime_department: String
}

type Faculty {
  prime_faculty: String
}

type Impact {
  h_index: Float
  num_citations: Int
  preferred_name: String
  prime_department: String
  prime_faculty: String
  scopus_id: String
  total_grant_amount: Int
  researcher_id: String
}

type Mutation {
  putPub(
    authors: [String!]
    id: ID!
    journal: String
    keywords: [String]
    title: String!
  ): Publication
}

type Publication {
  author_ids: [String!]
  author_names: String!
  cited_by: Int
  id: ID!
  journal: String
  keywords: String!
  link: String
  title: String!
  year_published: String
}

type Query {
  advancedSearchGrants(
    includeAllTheseWords: String!
    includeAnyOfTheseWords: String!
    includeTheseExactWordsOrPhrases: String!
    noneOfTheseWords: String!
    table: String!
  ): [grant]
  advancedSearchPublications(
    includeAllTheseWords: String!
    includeAnyOfTheseWords: String!
    includeTheseExactWordsOrPhrases: String!
    journal: String!
    noneOfTheseWords: String!
    table: String!
    year_gte: Int!
    year_lte: Int!
  ): [Publication]
  advancedSearchResearchers(
    includeAllTheseWords: String!
    includeAnyOfTheseWords: String!
    includeTheseExactWordsOrPhrases: String!
    noneOfTheseWords: String!
    prime_department: String!
    prime_faculty: String!
    table: String!
  ): [ResearcherOpenSearch]
  allPublicationsPerFacultyQuery: [totalPubsPerFaculty]
  facultyMetrics(faculty: String!): [facultyMetric]
  getAllDepartments: [String]
  getAllDistinctJournals: [String]
  getAllFaculty: [String]
  getAllResearchersImpacts: [Impact]
  getNumberOfResearcherPubsAllYears(id: ID!): graphDataAllYears
  getNumberOfResearcherPubsLastFiveYears(id: ID!): graphData
  getPub(id: ID!): Publication
  getResearcher(id: ID!): Researcher
  getResearcherElsevier(id: ID!): ResearcherElsevier
  getResearcherFull(id: ID!): ResearcherFull
  getResearcherOrcid(id: ID!): ResearcherOrcid
  getResearcherPubsByCitations(id: ID!): [Publication]
  getResearcherPubsByTitle(id: ID!): [Publication]
  getResearcherPubsByYear(id: ID!): [Publication]
  searchPublications(
    search_value: String!
    journalsToFilterBy: [String]!
  ): [Publication]
  searchResearcher(
    search_value: String!
    departmentsToFilterBy: [String]!
    facultiesToFilterBy: [String]!
  ): [ResearcherOpenSearch]
  similarResearchers(researcher_id: String!): [ResearcherOpenSearch]
  totalPublicationPerYear: [pubsPerYear]
  wordCloud(gte: Int!, lte: Int!): [wordCloud]
  changeScopusId(oldScopusId: String!, newScopusId: String!): Boolean
  lastUpdatedResearchersList: [lastUpdated]
  getUpdatePublicationsLogs: [updatePublicationsLogType]
  searchGrants(
    search_value: String!
    grantAgenciesToFilterBy: [String]!
  ): [grant]
  searchPatents(
    search_value: String!
    patentClassificationFilter: [String]!
  ): [patent]
  otherResearchersWithKeyword(keyword: String!): [ResearcherOpenSearch]
  getAllGrantAgencies: [String]
  getFlaggedIds: [[Researcher]]
  getResearcherImpactsByDepartment(prime_department: String!): [Impact]
  getResearcherImpactsByFaculty(prime_faculty: String!): [Impact]
  getResearcherPatents(id: ID!): [patent]
  getResearcherGrants(id: ID!): [grant]
}

type Researcher {
  researcher_id: String
  institution_user_id: String
  areas_of_interest: String
  campus: String
  email: String
  first_name: String
  job_stream: String
  last_name: String
  orcid_id: String
  preferred_name: String
  prime_department: String
  prime_faculty: String
  rank: String
  scopus_id: String!
  second_department: String
  second_faculty: String
}

type ResearcherElsevier {
  h_index: Float
  id: ID!
  num_citations: Int
  num_documents: Int
}

type ResearcherFull {
  areas_of_interest: String
  campus: String
  email: String
  first_name: String
  h_index: Float
  merged_keywords: String
  job_stream: String
  keywords: String!
  last_name: String
  last_updated: String
  num_citations: Int
  num_documents: Int
  num_patents_filed: Int
  orcid_id: String
  preferred_name: String
  prime_department: String
  prime_faculty: String
  rank: String
  scopus_id: String!
  second_department: String
  second_faculty: String
}

type ResearcherOpenSearch {
  researcher_id: String
  campus: String
  email: String
  first_name: String
  job_stream: String
  keywords: String
  last_name: String
  preferred_name: String
  prime_department: String
  prime_faculty: String
  rank: String
  scopus_id: String
  second_department: String
  second_faculty: String
}

type ResearcherOrcid {
  id: ID!
  num_patents_filed: Int
}

type facultyMetric {
  faculty: String
  num_publications: String
  year: String
}

type grant {
  assigned_id: String!
  agency: String!
  amount: Int
  department: String
  end_date: String
  grant_program: String
  keywords: String
  name: String!
  project_title: String
  start_date: String
  year: String
}

type graphData {
  lastFiveYears: [String]
  publicationsPerYear: [String]
}

type graphDataAllYears {
  allyears: [String]
  publicationsPerYear: [String]
}

type lastUpdated {
  last_updated: String
  preferred_name: String
}

type patent {
  patent_title: String
  patent_sponsors: String
  patent_classification: String
  patent_family_number: String
  patent_inventors: String
  patent_number: String
  patent_publication_date: String
  inventors_assigned_ids: String
  matched_inventors_names: String
}

type pubsPerYear {
  count: String
  year_published: String
}

type totalPubsPerFaculty {
  faculty: String
  sum: Int
}

type updatePublicationsLogType {
  date_updated: String
  number_of_publications_updated: Int
}

type wordCloud {
  text: String
  value: Int
}
